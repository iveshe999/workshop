knitr::opts_chunk$set(warning=FALSE, message=FALSE)
# 1. Store executive names and salaries in vectors
manager <- c("Timothy D. Cook", "D. Bruce Sewell")
salary_in_thousand <- c(2000, 1000)
# 2. Call `data.frame()` and specify the column names
X <- data.frame(EXEC_FULLNAME = manager, SALARY = salary_in_thousand)
print(X)
library(tidyverse)
Y <- tibble(EXEC_FULLNAME = c("Timothy D. Cook", "D. Bruce Sewell"),
SALARY =  c(2000, 1000))
Z <- tibble(EXEC_FULLNAME = c("Timothy D. Cook", "Luca Maestri"), BONUS = c(0,0))
# Load the data
df <- read_csv("manager.csv")
# 1. Store executive names and salaries in vectors
manager <- c("Timothy D. Cook", "D. Bruce Sewell")
salary_in_thousand <- c(2000, 1000)
# 2. Call `data.frame()` and specify the column names
X <- data.frame(EXEC_FULLNAME = manager, SALARY = salary_in_thousand)
print(X)
library(tidyverse)
Y <- tibble(EXEC_FULLNAME = c("Timothy D. Cook", "D. Bruce Sewell"),
SALARY =  c(2000, 1000))
Z <- tibble(EXEC_FULLNAME = c("Timothy D. Cook", "Luca Maestri"), BONUS = c(0,0))
library(tidyverse)
Y <- tibble(EXEC_FULLNAME = c("Timothy D. Cook", "D. Bruce Sewell"),
SALARY =  c(2000, 1000))
Z <- tibble(EXEC_FULLNAME = c("Timothy D. Cook", "Luca Maestri"), BONUS = c(0,0))
# Load the data
df <- read_csv("manager.csv")
# Load the data
df <- read_csv("/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lec/lec-03/manager.csv")
library(tidyverse)
Y <- tibble(EXEC_FULLNAME = c("Timothy D. Cook", "D. Bruce Sewell"),
SALARY =  c(2000, 1000))
Z <- tibble(EXEC_FULLNAME = c("Timothy D. Cook", "Luca Maestri"), BONUS = c(0,0))
left_join(Y, Z, by = "EXEC_FULLNAME")
right_join(Y, Z, by = "EXEC_FULLNAME")
inner_join(Y, Z, by = "EXEC_FULLNAME")
full_join(Y, Z, by = "EXEC_FULLNAME")
library(tidyverse)
Y <- tibble(EXEC_FULLNAME = c("Timothy D. Cook", "D. Bruce Sewell"),
SALARY =  c(2000, 1000))
Z <- tibble(EXEC_FULLNAME = c("Timothy D. Cook", "Luca Maestri"), BONUS = c(0,0))
print(Y)
# Load the data
df <- read_csv("/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lec/lec-03/manager.csv")
# First six rows
head(df)
# Number of rows and columns
dim(df)
nrow(df)
ncol(df)
# Column names and variable types
names(df)
str(df)
# Select one column as a vector
df$EXEC_FULLNAME
df[['EXEC_FULLNAME']]
df[[7]]
# Select one column as a tibble
df['EXEC_FULLNAME']
df[7]
df[,'EXEC_FULLNAME']
df[,7]
select(df,EXEC_FULLNAME)
# Select two columns
df[,c("EXEC_FULLNAME","SALARY")]
df[,c(7,9)]
select(df, EXEC_FULLNAME, SALARY)
# Select five rows and two columns
df[c(1:5), c("EXEC_FULLNAME","SALARY")]
df[c(1:5), c(7,9)]
# Find observations of AAPL executives in 2015. What kind of vector does this return?
df$YEAR==2015 & df$TICKER=="AAPL"
# Use that vector to select the observations of interest
df[df$YEAR==2015 & df$TICKER=="AAPL",]
filter(df,YEAR==2015, TICKER=="AAPL")
# Minimum salary
min(df$SALARY)
# What kind of vector does this return?
df$SALARY==min(df$SALARY)
# Use that vector to select the observations of interest
df[df$SALARY==min(df$SALARY),]
filter(df,SALARY==min(SALARY))
# Minimum salary
min(df$SALARY)
# What kind of vector does this return?
df$SALARY==min(df$SALARY)
# Use that vector to select the observations of interest
df[df$SALARY==min(df$SALARY),]
filter(df,SALARY==min(SALARY))
# Minimum salary
min(df$SALARY)
# What kind of vector does this return?
df$SALARY==min(df$SALARY)
# Use that vector to select the observations of interest
df[df$SALARY==min(df$SALARY),]
filter(df,SALARY==min(SALARY))
df
# Minimum salary
min(df$SALARY)
# What kind of vector does this return?
df$SALARY==min(df$SALARY)
# Use that vector to select the observations of interest
df[df$SALARY==min(df$SALARY),]
filter(df,SALARY==min(SALARY))
print(filter)
# Minimum salary
min(df$SALARY)
# What kind of vector does this return?
df$SALARY==min(df$SALARY)
# Use that vector to select the observations of interest
df[df$SALARY==min(df$SALARY),]
filter(df,SALARY==min(SALARY))
filter
#Name and salary of executives of AAPL in 2015
df[df$YEAR==2015 & df$TICKER=="AAPL", c("EXEC_FULLNAME","SALARY")]
# ascending order of TDC1 (total compensation, thousands of $)
arrange(df,TDC1)
# descending order of TDC1
arrange(df,desc(TDC1))
# ascending order of TICKER and YEAR, and descending order of TDC1
arrange(df,TICKER, YEAR, desc(TDC1))
#display sorted df but do not modify
arrange(df,TICKER, YEAR, desc(TDC1))
# sort the df and save it
df <- arrange(df,TICKER, YEAR, desc(TDC1))
df
# Create new variable equal to salary plus bonus
df$NEWVAR <- df$SALARY + df$BONUS
head(df)
# use `seq()` to identify the 6 thresholds for forming 5 equal width bins
bins <- seq(min(df$SALARY), max(df$SALARY), (max(df$SALARY) - min(df$SALARY))/5)
bins
#bin SALARY
df$SALARY_bin <- .bincode(df$SALARY, bins, include.lowest = TRUE)
#bin SALARY
df$SALARY_bin <- .bincode(df$SALARY, bins, include.lowest = TRUE)
# use `table()` to display frequency counts of unique values
table(df$SALARY_bin)
df$SALARY_cut <- cut(df$SALARY, 5)
# frequency counts of unique values (compare to SALARY_bin)
table(df$SALARY_cut)
# does not modify df
mutate(df, SALARY_1000=SALARY*1000, BONUS_1000=BONUS*1000)
head(df)
# modifies df
df <- mutate(df, SALARY_1000=SALARY*1000, BONUS_1000=BONUS*1000)
head(df)
# drop a column
df$SALARY_1000 <- NULL
head(df)
