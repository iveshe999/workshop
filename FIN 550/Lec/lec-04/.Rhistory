knitr::opts_chunk$set(warning=FALSE, message=FALSE,eval=FALSE)
# load the data
library(tidyverse)
df <- read_csv("/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lec/lec-04/exe.csv")
dim(df)
head(df)
# Report summary statistics for SALARY and TICKER
summary(df$SALARY)
summary(df$TICKER)
# Try it: what happens if you apply `summary()` to a data frame?
# First 6 values for SALARY
head(df$SALARY)
# Is SALARY>1000?
head(df$SALARY>1000)
# When used with numeric functions, TRUE=1 and FALSE=0
#  --> Use `sum()` to count number of rows with SALARY>1000
sum(df$SALARY>1000)
# Try it: use `count()` to count number of rows with SALARY>1000
# Report summary statistics for SALARY and TICKER
summary(df$SALARY)
summary(df$TICKER)
# Try it: what happens if you apply `summary()` to a data frame?
summary()
summary()
knitr::opts_chunk$set(warning=FALSE, message=FALSE,eval=FALSE)
# load the data
library(tidyverse)
df <- read_csv("/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lec/lec-04/exe.csv")
dim(df)
head(df)
# Report summary statistics for SALARY and TICKER
summary(df$SALARY)
summary(df$TICKER)
# Try it: what happens if you apply `summary()` to a data frame?
summary()
# Create a grouped table: TICKER by YEAR
df_by_TICKER_YEAR <- group_by(df,TICKER, YEAR)
class(df_by_TICKER_YEAR)
# Try it: how many observations does this grouped table have?
#         how many does df have?
# Try it: how many TICKER by YEAR groups are there? (Hint: use `n_distinct()`)
# Calculate the proportion of rows with CFOANN=CFO
mean(!is.na(df$CFOANN))
# What proportion do you get if you run this code? Why?
mean(df$CFOANN=="CFO", na.rm=T)
# Report summary statistics for SALARY and TICKER
summary(df$SALARY)
summary(df$TICKER)
# Try it: what happens if you apply `summary()` to a data frame?
summary()
# Report summary statistics for SALARY and TICKER
summary(df$SALARY)
summary(df$TICKER)
# Try it: what happens if you apply `summary()` to a data frame?
summary(data)
# Report summary statistics for SALARY and TICKER
summary(df$SALARY)
summary(df$TICKER)
# Try it: what happens if you apply `summary()` to a data frame?
summary(df)
# First 6 values for SALARY
head(df$SALARY)
# Is SALARY>1000?
head(df$SALARY>1000)
# When used with numeric functions, TRUE=1 and FALSE=0
#  --> Use `sum()` to count number of rows with SALARY>1000
sum(df$SALARY>1000)
# Try it: use `count()` to count number of rows with SALARY>1000
count(df$SALARY>1000)
# First 6 values for SALARY
head(df$SALARY)
# Is SALARY>1000?
head(df$SALARY>1000)
# When used with numeric functions, TRUE=1 and FALSE=0
#  --> Use `sum()` to count number of rows with SALARY>1000
sum(df$SALARY>1000)
# Try it: use `count()` to count number of rows with SALARY>1000
library(dplyr)
df %>%
filter(SALARY > 1000) %>%
count()
min(df$SALARY)
max(df$SALARY)
mean(df$SALARY)
median(df$SALARY)
quantile(df$SALARY, 0.25)
quantile(df$SALARY, 0.75)
quantile(df$SALARY, c(0.25, 0.75))
n_distinct(df$SALARY)
n_distinct(df$TICKER)
# `table()` is a base R function
table(df$TICKER)
# `count()` is a tidyverse function
count(df,TICKER)
# First 6 values for SALARY
head(df$SALARY)
# Is SALARY>1000?
head(df$SALARY>1000)
# When used with numeric functions, TRUE=1 and FALSE=0
#  --> Use `sum()` to count number of rows with SALARY>1000
sum(df$SALARY>1000)
# Try it: use `count()` to count number of rows with SALARY>1000
library(dplyr)
df %>%
filter(SALARY > 1000) %>%
count()
count[df[SALARY]>1000]
# First 6 values for SALARY
head(df$SALARY)
# Is SALARY>1000?
head(df$SALARY>1000)
# When used with numeric functions, TRUE=1 and FALSE=0
#  --> Use `sum()` to count number of rows with SALARY>1000
sum(df$SALARY>1000)
# Try it: use `count()` to count number of rows with SALARY>1000
library(dplyr)
df %>%
filter(SALARY > 1000) %>%
count()
count[df.SALARY>1000]
install.packages("plyr")
library(plyr)
# First 6 values for SALARY
head(df$SALARY)
# Is SALARY>1000?
head(df$SALARY>1000)
# When used with numeric functions, TRUE=1 and FALSE=0
#  --> Use `sum()` to count number of rows with SALARY>1000
sum(df$SALARY>1000)
# Try it: use `count()` to count number of rows with SALARY>1000
library(dplyr)
df %>%
filter(SALARY > 1000) %>%
count()
library(plyr)
count(df$SALARY > 1000)
# First 6 values for SALARY
head(df$SALARY)
# Is SALARY>1000?
head(df$SALARY>1000)
# When used with numeric functions, TRUE=1 and FALSE=0
#  --> Use `sum()` to count number of rows with SALARY>1000
sum(df$SALARY>1000)
# Try it: use `count()` to count number of rows with SALARY>1000
library(dplyr)
df %>%
filter(SALARY > 1000) %>%
count()
library(plyr)
count(df$SALARY > 1000)
count(df$SALARY > 1000)$freq[2]
# First 6 values for YEAR
head(df$YEAR)
# Is YEAR=2015?
head(df$YEAR == 2015)
# Use sum() to count number of rows with YEAR=2015
sum(df$YEAR == 2015)
# Try it: use `count()` to count number of rows with YEAR=2015
# First 6 values for YEAR
head(df$YEAR)
# Is YEAR=2015?
head(df$YEAR == 2015)
# Use sum() to count number of rows with YEAR=2015
sum(df$YEAR == 2015)
# Try it: use `count()` to count number of rows with YEAR=2015
result <- count(df$YEAR == 2015)
# First 6 values for YEAR
head(df$YEAR)
# Is YEAR=2015?
head(df$YEAR == 2015)
# Use sum() to count number of rows with YEAR=2015
sum(df$YEAR == 2015)
# Try it: use `count()` to count number of rows with YEAR=2015
count(df$YEAR == 2015)
# First 6 values for YEAR
head(df$YEAR)
# Is YEAR=2015?
head(df$YEAR == 2015)
# Use sum() to count number of rows with YEAR=2015
sum(df$YEAR == 2015)
# Try it: use `count()` to count number of rows with YEAR=2015
count(df$YEAR == 2015)
count(df$YEAR == 2015)$freq[2]
# Proportion of rows with SALARY >1000
mean(df$SALARY > 1000)
# Proportion of rows with YEAR = 2015
mean(df$YEAR == 2015)
# Average and maximum SALARY, number of observations, and number of unique TICKER
summarize(df,
SALARY_mean = mean(SALARY),
SALARY_max = max(SALARY),
n_rows = n(),
n_firms = n_distinct(TICKER))
# Load dplyr package
library(dplyr)
# Calculate the average and maximum SALARY, number of rows, and unique TICKERs
df %>%
summarize(
SALARY_mean = mean(SALARY, na.rm = TRUE),
SALARY_max = max(SALARY, na.rm = TRUE),
n_rows = n(),
n_firms = n_distinct(TICKER)
)
# Load dplyr package
library(dplyr)
# Calculate the average and maximum SALARY, number of rows, and unique TICKERs
summary <- df %>%
summarize(
SALARY_mean = mean(SALARY, na.rm = TRUE),
SALARY_max = max(SALARY, na.rm = TRUE),
n_rows = n(),
n_firms = n_distinct(TICKER)
)
# Load necessary library
library(dplyr)
# Load the dataset
df <- read.csv("/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lec/lec-04/exe.csv")
# Calculate average and maximum SALARY, number of rows, and unique TICKERs
summary <- df %>%
summarize(
SALARY_mean = mean(SALARY, na.rm = TRUE),
SALARY_max = max(SALARY, na.rm = TRUE),
n_rows = n(),
n_firms = n_distinct(TICKER)
)
# Load necessary library
library(dplyr)
# Load the dataset
df <- read.csv("/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lec/lec-04/exe.csv")
# Ensure that dplyr functions are used
library(dplyr)
# Use dplyr::summarize explicitly
summary <- df %>%
dplyr::summarize(
SALARY_mean = mean(SALARY, na.rm = TRUE),
SALARY_max = max(SALARY, na.rm = TRUE),
n_rows = dplyr::n(),
n_firms = dplyr::n_distinct(TICKER)
)
# Print the summary
print(summary)
# Load necessary library
library(dplyr)
# Load the dataset
df <- read.csv("/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lec/lec-04/exe.csv")
# Ensure that dplyr functions are used
library(dplyr)
# Use dplyr::summarize explicitly
summary <- df %>%
dplyr::summarize(
SALARY_mean = mean(SALARY, na.rm = TRUE),
SALARY_max = max(SALARY, na.rm = TRUE),
n_rows = dplyr::n(),
n_firms = dplyr::n_distinct(TICKER)
)
# Load necessary library
library(dplyr)
# Load the dataset
df <- read.csv("/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lec/lec-04/exe.csv")
# Ensure that dplyr functions are used
library(dplyr)
# Use dplyr::summarize explicitly
summary <- df %>%
dplyr::summarize(
SALARY_mean = mean(SALARY, na.rm = TRUE),
SALARY_max = max(SALARY, na.rm = TRUE),
n_rows = dplyr::n(),
n_firms = dplyr::n_distinct(TICKER)
)
summary
# Load necessary library
library(dplyr)
# Load the dataset
df <- read.csv("/Users/iveshe/Library/Mobile Documents/com~apple~CloudDocs/Term 1/FIN 550/Lec/lec-04/exe.csv")
# Ensure that dplyr functions are used
library(dplyr)
# Use dplyr::summarize explicitly
summary <- df %>%
dplyr::summarize(
SALARY_mean = mean(SALARY, na.rm = TRUE),
SALARY_max = max(SALARY, na.rm = TRUE),
n_rows = dplyr::n(),
n_firms = dplyr::n_distinct(TICKER)
)
print(summary)
# Create a grouped table: TICKER by YEAR
df_by_TICKER_YEAR <- group_by(df,TICKER, YEAR)
class(df_by_TICKER_YEAR)
# Try it: how many observations does this grouped table have?
#         how many does df have?
# Group by TICKER and YEAR
df_by_TICKER_YEAR <- df %>% group_by(TICKER, YEAR)
# Check the class of the grouped table
class(df_by_TICKER_YEAR)
# Number of observations in the grouped table (same as original df)
nrow(df_by_TICKER_YEAR)
# Number of observations in the original df
nrow(df)
# Try it: how many TICKER by YEAR groups are there? (Hint: use `n_distinct()`)
# Number of distinct TICKER by YEAR groups
n_groups <- df %>% summarize(n_distinct_groups = n_distinct(paste(TICKER, YEAR)))
print(n_groups)
nrow(df_by_TICKER_YEAR)
nrow(df)
n_distinct(df$TICKER, df$YEAR)
# Report statistics by group (TICKER by YEAR). How many rows does the table have?
print( summarize(df_by_TICKER_YEAR,
SALARY_mean = mean(SALARY),
SALARY_max = max(SALARY),
n_obs_in_group = n(),
.groups = "drop"
# undoes the grouping structure
), n = 6)
# Load dplyr library
library(dplyr)
# Group by TICKER and YEAR
df_by_TICKER_YEAR <- group_by(df, TICKER, YEAR)
# Summarize statistics by group
summary_table <- df_by_TICKER_YEAR %>%
summarize(
SALARY_mean = mean(SALARY, na.rm = TRUE),
SALARY_max = max(SALARY, na.rm = TRUE),
n_obs_in_group = n(),
.groups = "drop"  # Undo the grouping structure after summarizing
)
# Detach plyr to avoid conflicts
if ("package:plyr" %in% search()) detach("package:plyr", unload = TRUE)
# Load the dplyr library
library(dplyr)
# Group by TICKER and YEAR
df_by_TICKER_YEAR <- group_by(df, TICKER, YEAR)
# Summarize statistics by group
summary_table <- df_by_TICKER_YEAR %>%
summarize(
SALARY_mean = mean(SALARY, na.rm = TRUE),
SALARY_max = max(SALARY, na.rm = TRUE),
n_obs_in_group = n(),
.groups = "drop"  # Undo the grouping structure after summarizing
)
# Print the first 6 rows of the summary table
print(summary_table, n = 6)
# Calculate the proportion of rows with CFOANN=CFO
mean(!is.na(df$CFOANN))
# What proportion do you get if you run this code? Why?
mean(df$CFOANN=="CFO", na.rm=T)
v1 <- c(1, 2, NA, 4)
v2 <- c("string1", NA, "NA", "string4")
# Use `is.na()` to detect missing values
is.na(v1)
is.na(v2)
v1 <- c(1, 2, NA, 4)
# Cannot do comparisons with NA
v1 < 0
v1 == NA
v1 <- c(1, 2, NA, 4)
# Cannot do comparisons with NA
v1 < 0
v1 == NA
# NA may need to be specially handled
mean(v1)
mean(v1, na.rm = TRUE)
# Use `is.na()` to detect missing values
head(df$CFOANN)
head(is.na(df$CFOANN))
# Number of CFO's = number of rows where CFOANN is NOT missing
sum(!is.na(df$CFOANN))
# Or, specify the na.rm option in `sum()`
sum(df$CFOANN=="CFO", na.rm=TRUE)
# Calculate the proportion of rows with CFOANN=CFO
mean(!is.na(df$CFOANN))
# What proportion do you get if you run this code? Why?
mean(df$CFOANN=="CFO", na.rm=T)
# Calculate the proportion of rows with CFOANN=CFO
mean(!is.na(df$CFOANN))
# What proportion do you get if you run this code? Why?
mean(df$CFOANN=="CFO", na.rm=T)
# Use `is.na()` to detect missing values
head(df$CFOANN)
head(is.na(df$CFOANN))
# Number of CFO's = number of rows where CFOANN is NOT missing
sum(!is.na(df$CFOANN))
# Or, specify the na.rm option in `sum()`
sum(df$CFOANN=="CFO", na.rm=TRUE)
# counts of CEOs and CFOs
summarize(df,
CEOANN_count = sum(CEOANN=="CEO", na.rm=T),
CFOANN_count = sum(CFOANN=="CFO", na.rm=T))
# Try it: what happens if you omit `na.rm=T?
# counts of CEOs and CFOs, omitting `na.rm=T
summarize(df,
CEOANN_count = sum(CEOANN=="CEO"),
CFOANN_count = sum(CFOANN=="CFO"))
# counts of CEOs and CFOs
summarize(df,
CEOANN_count = sum(CEOANN=="CEO", na.rm=T),
CFOANN_count = sum(CFOANN=="CFO", na.rm=T))
# Try it: what happens if you omit `na.rm=T`?
x = 419
# Method 1: creates lots of intermediate variables
result1 = log(x)
result2 = round(result1,3)
print(result2)
# Method 2: no intermediates
x %>%
log() %>%
round(3)
df %>%
filter(CEOANN=="CEO" & YEAR==2019) %>%
mutate(SALARY_BONUS = SALARY+BONUS) %>%
select(TICKER,EXEC_FULLNAME,SALARY,BONUS,SALARY_BONUS)
df %>%
group_by(TICKER) %>%
summarize(SALARY_mean = mean(SALARY)) %>%
arrange(desc(SALARY_mean))
df %>%
group_by(TICKER) %>%
summarize(SALARY_mean = mean(SALARY)) %>%
filter(SALARY_mean>900) %>%
arrange(desc(SALARY_mean))
df %>%
group_by(TICKER) %>%
arrange(desc(TDC1)) %>%
summarize(SALARY_senior = first(SALARY))
df %>%
mutate(SALARY_BONUS = SALARY + BONUS) %>%
group_by(TICKER) %>%
summarize(SALARY_BONUS_max = max(SALARY_BONUS))
df %>%
group_by(GENDER) %>%
summarize(SALARY_mean = mean(SALARY),
n_rows = n() )
df %>%
filter(CEOANN=="CEO" | CFOANN=="CFO") %>%
group_by(GENDER) %>%
summarize(SALARY_mean = mean(SALARY),
n_rows = n() )
df %>%
filter(YEAR==2015) %>%
group_by(TICKER) %>%
summarize(SALARY,
SALARY_cumsum = cumsum(SALARY),
SALARY_sum = sum(SALARY), .groups="drop")
